name: prod
services:
  mongo:
    image: mongo:7
    container_name: mongo_prod
    command: ["--replSet","rs0","--bind_ip_all","--keyFile","/etc/mongo-keyfile"]
    restart: unless-stopped
    env_file:
      - ../../apps/backend/.env.backend.prod
    volumes:
      - ../mongo/keys/mongo-keyfile:/etc/mongo-keyfile:ro
      - prod_mongo_data:/data/db
      - ./../mongo/init-user.sh:/docker-entrypoint-initdb.d/init-user.sh:rw
      - /home/appointment-platform/mongo-backup:/backup:rw   # 👈 monta tu carpeta real
      - ./../mongo/prod-init/01-init-restore.sh:/docker-entrypoint-initdb.d/init-restore.sh:rw
    logging:
      driver: "json-file"
      options:
        max-size: "10m"     # tamaño máximo de un archivo de log
        max-file: "3"       # número de archivos de log rotados
    environment:
      - MONGO_INITDB_ROOT_USERNAME=pgaisse
      - MONGO_INITDB_ROOT_PASSWORD=Patoch-2202
      - MONGO_INITDB_DATABASE=productionDB
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app_network

  mongo-init-replica:
    image: mongo:7
    depends_on:
      mongo:
        condition: service_healthy
    restart: "no"
    environment:
      MONGO_INITDB_ROOT_USERNAME: pgaisse
      MONGO_INITDB_ROOT_PASSWORD: Patoch-2202
    entrypoint: ["/bin/bash","-lc"]
    command: |
      echo "⏳ Esperando ping..."
      for i in {1..60}; do
        mongosh --host mongo:27017 --quiet --eval "db.runCommand({ ping: 1 }).ok" && break || sleep 2
      done
      echo "🚀 rs.initiate() autenticado"
      mongosh --host mongo:27017 -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --quiet --eval '
        try {
          rs.initiate({_id:"rs0", members:[{_id:0, host:"mongo:27017"}]})
        } catch(e) { print(e.message) }
      '
      echo "⏳ Esperando PRIMARY..."
      for i in {1..60}; do
        state=$(mongosh --host mongo:27017 -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --quiet --eval 'var m=rs.status().members.find(x=>x.self); m?m.stateStr:""')
        [ "$state" = "PRIMARY" ] && echo "✅ PRIMARY" && exit 0 || sleep 2
      done
      echo "❌ No se alcanzó PRIMARY"; exit 1
    networks: [app_network]
  api:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.backend
    container_name: api_prod
    restart: unless-stopped
    expose:
      - "3304"            # 👈 visible solo dentro de la red Docker
    logging:
      driver: "json-file"
      options:
        max-size: "10m"     # tamaño máximo de un archivo de log
        max-file: "3"       # número de archivos de log rotados
    env_file:
      - ../../apps/backend/.env.backend.prod
    depends_on:
      mongo:
        condition: service_healthy
      mongo-init-replica:
        condition: service_completed_successfully
    networks:
      - app_network

  nginx:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.frontend
    container_name: nginx_prod
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"     # tamaño máximo de un archivo de log
        max-file: "3"       # número de archivos de log rotados
    env_file:
      - ../../apps/frontend/.env.frontend.prod
    ports:
      - "80:80"
      - "443:443"
      - "3004:3004"
      
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - certs:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    depends_on:
      - api
    networks:
      - app_network
      
  certbot:
    image: certbot/certbot
    container_name: certbot_prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"     # tamaño máximo de un archivo de log
        max-file: "3"       # número de archivos de log rotados
    volumes:
      - certs:/etc/letsencrypt
      - certbot-www:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt   # 👈 misma carpeta real
    entrypoint: >
      sh -c "certbot certonly --webroot -w /var/www/certbot
      -d letsmarter.com -d www.letsmarter.com
      --email p.gaisse@gmail.com--agree-tos --non-interactive --force-renewal"

volumes:
  prod_mongo_data:
  certs:
    driver: local
    driver_opts:
      type: none
      device: /etc/letsencrypt   # 👈 carpeta real del host
      o: bind
  certbot-www:
networks:
  app_network:
    driver: bridge