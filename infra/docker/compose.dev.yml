name: dev
services:
  mongo:
    image: mongo:7
    container_name: mongo_dev
    command: ["--replSet","rs0","--bind_ip_all","--keyFile","/etc/mongo-keyfile"]
    ports: ["27019:27017"]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=pgaisse
      - MONGO_INITDB_ROOT_PASSWORD=Patoch-2202
      - MONGO_INITDB_DATABASE=productionDB
    volumes:
      - mongo_dev_data:/data/db
      - ../mongo/keys/mongo-keyfile:/etc/mongo-keyfile:ro
      # (deja tus scripts de init/restauraci√≥n como los ten√≠as)
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [app_network_dev]

  # üëá Job para inicializar el replica set una sola vez
  mongo-init-replica:
    image: mongo:7
    depends_on:
      mongo:
        condition: service_healthy
    restart: "no"
    environment:
      MONGO_INITDB_ROOT_USERNAME: pgaisse
      MONGO_INITDB_ROOT_PASSWORD: Patoch-2202
    entrypoint: ["/bin/bash","-lc"]
    command: |
      echo "‚è≥ Esperando ping..."
      for i in {1..60}; do
        mongosh --host mongo:27017 --quiet --eval "db.runCommand({ ping: 1 }).ok" && break || sleep 2
      done
      echo "üöÄ rs.initiate() autenticado"
      mongosh --host mongo:27017 -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --quiet --eval '
        try {
          rs.initiate({_id:"rs0", members:[{_id:0, host:"mongo:27017"}]})
        } catch(e) { print(e.message) }
      '
      echo "‚è≥ Esperando PRIMARY..."
      for i in {1..60}; do
        state=$(mongosh --host mongo:27017 -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --quiet --eval 'var m=rs.status().members.find(x=>x.self); m?m.stateStr:""')
        [ "$state" = "PRIMARY" ] && echo "‚úÖ PRIMARY" && exit 0 || sleep 2
      done
      echo "‚ùå No se alcanz√≥ PRIMARY"; exit 1
    networks: [app_network_dev]
    
  backend:
    image: node:20-alpine
    container_name: backend_dev
    working_dir: /repo/apps/backend
    command: sh -lc "npm install --no-audit --no-fund && npm run dev"
    env_file:
      - ../../apps/backend/.env.backend.dev
    environment:
      # üëá Fuerza a usar el nombre del servicio Docker como host
      - MONGO_HOST=mongo
      # üëá Activa RS y TX en el backend; aseg√∫rate de quitar MONGO_URI de tu .env
      - MONGO_RS=rs0
      - MONGO_USE_TRANSACTIONS=true
      - MONGO_DIRECT_CONNECTION=false
      - MONGO_URI=                # üëà override a vac√≠o si en tu .env exist√≠a (para que no se use)
    expose:
      - "3003"
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ../..:/repo
      - /repo/apps/backend/node_modules
    depends_on:
      mongo:
        condition: service_healthy
      mongo-init-replica:
        condition: service_completed_successfully
    networks:
      - app_network_dev

  frontend:
    image: node:20-alpine
    container_name: frontend_dev
    working_dir: /repo/apps/frontend
    command: sh -lc "CHOKIDAR_USEPOLLING=true WATCHPACK_POLLING=true npm install --no-audit --no-fund && npm run dev -- --host 0.0.0.0 --port 3004"
    env_file:
      - ../../apps/frontend/.env.frontend.dev
    depends_on:
      - backend
    expose:
      - "3004"
    volumes:
      - ../..:/repo
      - /repo/apps/frontend/node_modules
    networks:
      - app_network_dev

  nginx:
    container_name: nginx_dev
    image: nginx:1.27-alpine
    ports:
      - "8080:80"
      - "8443:8443"
    env_file:
      - ../../apps/backend/.env.backend.dev
    volumes:
      - ../nginx/nginx.dev.conf:/etc/nginx/conf.d/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - app_network_dev
    depends_on:
      - backend
      - frontend

  certbot:
    image: certbot/certbot
    container_name: certbot_dev
    volumes:
      - appointment_dev_certbot_www:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt
    networks:
      - app_network_dev

volumes:
  mongo_dev_data:
  appointment_dev_certbot_www:
  letsencrypt_dev:

networks:
  app_network_dev:
    driver: bridge
